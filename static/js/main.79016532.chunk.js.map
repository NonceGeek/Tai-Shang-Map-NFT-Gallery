{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","views/Home.jsx","views/Hints.jsx","views/Gallery.jsx","App.jsx","index.jsx","components/Nft.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","global","window","location","hostname","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","useBurner","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","_network","Home","yourCollectibles","readContracts","writeContracts","mintData","setMintData","transferToAddresses","setTransferToAddresses","maxWidth","paddingBottom","block_height","token_info","map_type","TaiShangMapNFT","claim","dataSource","renderItem","item","image","Item","Nft","nft","owner","update","transferFrom","uri","Gallery","totalSupply","useContractReader","nfts","setNfts","setLoading","getNft","mintedNfts","i","tokenByIndex","ownerOf","tokenURI","atob","tokenId","tokenInfo","getAllMintedNfts","tot","tasks","all","itemLayout","axios","initialNetwork","Web3ModalSetup","serverUrl","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","useOnBlock","_lastBlockNumber","myMainnetDAIBalance","yourBalance","setYourCollectibles","collectibleUpdate","tokenIndex","tokenOfOwnerByIndex","jsonManifestString","substring","jsonManifest","reverse","updateYourCollectibles","Web3Provider","code","reason","faucetAvailable","connection","_isSigner","setResult","msgToSign","setMsgToSign","extraData","setExtraData","possibleTxId","extraLink","replace","minHeight","get","currentLoader","send","sig","clearTimeout","post","signature","unique_id","res","selectedKeys","pathname","exact","path","flex","alignItems","lte","align","gutter","prevTheme","subgraphUri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","List","badgeNames","setBadgeNames","edit","setEdit","badges","setBadges","setTokenInfo","curNft","setCurNft","getBadgeNames","fetch","response","json","eval","files","content","parseTokenInfo","tokenInfo_","badges_","tokenInfoArr","badgeName","badgeCount","formatTokenInfo","handleBadges","cancelBadges","Web3Dev","nft_","getTokenInfo","confirmBadges","status","addBadgesMenu","removeBadgesMenu","keys","Meta","src","alt","destroyOnClose","overlay","module","exports","ERC721","abi"],"mappings":"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","file":"static/js/main.79016532.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 300,\r\n    blockExplorer: \"\",\r\n    // rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    rpcUrl: \"http://124.251.110.211:6791\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  polygon: {\r\n    name: \"polygon\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-rpc.com/\",\r\n    blockExplorer: \"https://polygonscan.com/\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.polygon.technology/\",\r\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"testnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"mainnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  fantom: {\r\n    name: \"fantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 250,\r\n    blockExplorer: \"https://ftmscan.com/\",\r\n    rpcUrl: `https://rpcapi.fantom.network`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  testnetFantom: {\r\n    name: \"testnetFantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 4002,\r\n    blockExplorer: \"https://testnet.ftmscan.com/\",\r\n    rpcUrl: `https://rpc.testnet.fantom.network`,\r\n    gasPrice: 1000000000,\r\n    faucet: \"https://faucet.fantom.network/\",\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\nconst { Text } = Typography;\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n**/\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://polygonscan.com/\"}address/${address}`;\r\n\r\nexport default function Address(props) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n  const address = props.value || props.address;\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {props.onChange ? (\r\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        ) : (\r\n          <Text copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        )}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n**/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n  let floatBalance = parseFloat(\"0.00\");\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\r\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  if (dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Authereum from \"authereum\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/**\r\n  Web3 modal helps us \"connect\" external wallets:\r\n**/\r\nconst web3ModalSetup = () =>\r\n  new Web3Modal({\r\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n    cacheProvider: true, // optional\r\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // required\r\n        options: {\r\n          bridge: \"https://polygon.bridge.walletconnect.org\",\r\n          infuraId: INFURA_ID,\r\n          rpc: {\r\n            10: \"https://mainnet.optimism.io\", // xDai\r\n            100: \"https://rpc.gnosischain.com\", // xDai\r\n            137: \"https://polygon-rpc.com\",\r\n            31337: \"http://localhost:8545\",\r\n            42161: \"https://arb1.arbitrum.io/rpc\",\r\n            80001: \"https://rpc-mumbai.maticvigil.com\",\r\n          },\r\n        },\r\n      },\r\n      portis: {\r\n        display: {\r\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n          name: \"Portis\",\r\n          description: \"Connect to Portis App\",\r\n        },\r\n        package: Portis,\r\n        options: {\r\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n        },\r\n      },\r\n      fortmatic: {\r\n        package: Fortmatic, // required\r\n        options: {\r\n          key: \"pk_live_5A7C91B2FC585A17\", // required\r\n        },\r\n      },\r\n      // torus: {\r\n      //   package: Torus,\r\n      //   options: {\r\n      //     networkParams: {\r\n      //       host: \"https://localhost:8545\", // optional\r\n      //       chainId: 1337, // optional\r\n      //       networkId: 1337 // optional\r\n      //     },\r\n      //     config: {\r\n      //       buildEnv: \"development\" // optional\r\n      //     },\r\n      //   },\r\n      // },\r\n      \"custom-walletlink\": {\r\n        display: {\r\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n          name: \"Coinbase\",\r\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n        },\r\n        package: walletLinkProvider,\r\n        connector: async (provider, _options) => {\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n      authereum: {\r\n        package: Authereum, // required\r\n      },\r\n    },\r\n  });\r\n\r\nexport default web3ModalSetup;\r\n","import { create } from \"ipfs-http-client\";\r\nimport { BufferList } from \"bl\";\r\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\r\n\r\nexport async function addToIPFS(file) {\r\n  const fileAdded = await ipfs.add(file);\r\n\r\n  return fileAdded;\r\n}\r\n\r\nexport function urlFromCID(cid) {\r\n  return `https://ipfs.infura.io/ipfs/${cid}`;\r\n}\r\n\r\nexport async function getFromIPFS(hashToGet) {\r\n  for await (const file of ipfs.cat(hashToGet)) {\r\n    const content = new BufferList(file).toString();\r\n\r\n    return content;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { Badge, Input } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nimport Blockie from \"./Blockie\";\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n**/\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n**/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\r\n      value={display}\r\n      addonAfter={\r\n        !props.price ? (\r\n          \"\"\r\n        ) : (\r\n          <div\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              if (mode === \"USD\") {\r\n                setMode(\"ETH\");\r\n                setDisplay(currentValue);\r\n              } else {\r\n                setMode(\"USD\");\r\n                if (currentValue) {\r\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n                  setDisplay(usdValue);\r\n                } else {\r\n                  setDisplay(currentValue);\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\r\n          </div>\r\n        )\r\n      }\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport QR from \"qrcode.react\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n**/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    useBurner={boolean}\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n    isContract={boolean}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n**/\r\n\r\nexport default function Account({\r\n  useBurner,\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n  isContract,\r\n}) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {web3Modal && web3Modal.cachedProvider ? (\r\n        <>\r\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n          <Wallet\r\n            address={address}\r\n            provider={localProvider}\r\n            signer={userSigner}\r\n            ensProvider={mainnetProvider}\r\n            price={price}\r\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          />\r\n        </>\r\n      ) : useBurner ? (\r\n        \"\"\r\n      ) : isContract ? (\r\n        <>\r\n          {address && <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />}\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {useBurner && web3Modal && !web3Modal.cachedProvider ? (\r\n        <>\r\n          <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n          <Balance address={address} provider={localProvider} price={price} />\r\n          <Wallet\r\n            address={address}\r\n            provider={localProvider}\r\n            signer={userSigner}\r\n            ensProvider={mainnetProvider}\r\n            price={price}\r\n            color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          />\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n**/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Address from \"../Address\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\r\n  }\r\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\r\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\r\n    const displayable = JSON.stringify(thing.map(mostReadable));\r\n    return asText ? (\r\n      displayable\r\n    ) : (\r\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\r\n    );\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\r\n\r\nexport { tryToDisplay, tryToDisplayAsText };\r\n","import { Button, Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { tryToDisplay } from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nimport { Transactor } from \"../../helpers\";\r\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const handleForm = returned => {\r\n    if (returned) {\r\n      setForm({});\r\n    }\r\n  };\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  handleForm(returned);\r\n                  result = tryToDisplayAsText(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                handleForm(returned);\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport Address from \"../Address\";\r\nimport Balance from \"../Balance\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.entries(contract.interface.functions).filter(\r\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo[0]]\r\n        : contract.connect(signer)[contractFuncInfo[0]];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo[1])) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo[1].name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo[1]}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n            blockExplorer={blockExplorer}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo[0]}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo[1]}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div style={{ fontSize: 24 }}>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Address value={address} />\r\n              <Balance address={address} provider={provider} price={price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n**/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n    <a href=\"https://github.com/WeLightProject/Tai-Shang-NFT-Gallery\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <PageHeader\r\n        title=\"Tai-Shang-NFT-Gallery\"\r\n        subTitle=\"Claim Map NFT\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n**/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst createProvider = async url => {\r\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\r\n\r\n  await p.ready;\r\n\r\n  return p;\r\n};\r\n\r\nexport default function useStaticJsonRPC(urlArray) {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const handleProviders = useCallback(async () => {\r\n    try {\r\n      const p = await Promise.race(urlArray.map(createProvider));\r\n      const _p = await p;\r\n\r\n      setProvider(_p);\r\n    } catch (error) {\r\n      // todo: show notification error about provider issues\r\n      console.log(error);\r\n    }\r\n  }, [urlArray]);\r\n\r\n  useEffect(() => {\r\n    handleProviders();\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(urlArray)]);\r\n\r\n  return provider;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\n\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n  return undefined;\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n  const [tokens, setTokens] = useState();\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI, _tokenListUri, activeChainId]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n    // eslint-disable-next-line\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { utils, ethers } from \"ethers\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\n\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/** \r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n**/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { Alert, Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nimport { NETWORK } from \"../constants\";\r\n\r\nfunction NetworkDisplay({\r\n  NETWORKCHECK,\r\n  localChainId,\r\n  selectedChainId,\r\n  targetNetwork,\r\n  USE_NETWORK_SELECTOR,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log({ networkDisplay });\r\n\r\n  return networkDisplay;\r\n}\r\n\r\nexport default NetworkDisplay;\r\n","import { Button } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBalance, useGasPrice } from \"eth-hooks\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\n\r\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n\r\n  // fetch local balance\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // get gas Price from network\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  let faucetHint = \"\";\r\n\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16, display: \"inline-flex\" }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return faucetHint;\r\n}\r\n\r\nexport default FaucetHint;\r\n","import { useContractReader } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button, Card, List, Input } from \"antd\";\r\nimport { Address, AddressInput, Nft, Gallery } from \"../components\";\r\n\r\n/**\r\n * web3 props can be passed from '../App.jsx' into your local view component for use\r\n * @param {*} yourLocalBalance balance on current network\r\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\r\n * @returns react component\r\n **/\r\nfunction Home({\r\n  isSigner,\r\n  loadWeb3Modal,\r\n  yourCollectibles,\r\n  address,\r\n  blockExplorer,\r\n  mainnetProvider,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n  // you can also use hooks locally in your component of choice\r\n  // in this case, let's keep track of 'purpose' variable from our contract\r\n  // const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\r\n  const [mintData, setMintData] = useState({});\r\n  const [transferToAddresses, setTransferToAddresses] = useState({});\r\n  return (\r\n    <div>\r\n      {/* Mint button */}\r\n      <div style={{ maxWidth: 820, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n        <div style={{ margin: 10}}>\r\n          <span>Block Height</span>\r\n          <Input\r\n            placeholder=\"eg. 10086\"\r\n            onChange={e => {\r\n              setMintData({...mintData, block_height: e.target.value});\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ margin: 10}}>\r\n          <span>Token Info</span>\r\n          <Input\r\n            placeholder=\"eg. Profile\"\r\n            onChange={e => {\r\n              setMintData({...mintData, token_info: e.target.value});\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ margin: 10}}>\r\n          <span>Map Type</span>\r\n          <Input\r\n            placeholder=\"eg. Gallery\"\r\n            onChange={e => {\r\n              setMintData({...mintData, map_type: e.target.value});\r\n            }}\r\n          />\r\n        </div>\r\n        {isSigner ? (\r\n          <Button\r\n            type={\"primary\"}\r\n            onClick={() => {\r\n              tx(writeContracts.TaiShangMapNFT.claim(mintData.block_height, mintData.token_info, mintData.map_type));\r\n            }}\r\n          >\r\n            MINT\r\n          </Button>\r\n        ) : (\r\n          <Button type={\"primary\"} onClick={loadWeb3Modal}>\r\n            CONNECT WALLET\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div style={{ width: 820, margin: \"auto\", paddingBottom: 256 }}>\r\n        <List\r\n          bordered\r\n          dataSource={yourCollectibles}\r\n          renderItem={item => {\r\n            const id = item.id.toNumber();\r\n            console.log(\"IMAGE\",item.image)\r\n            return (\r\n              <List.Item key={id + \"_\" + item.uri + \"_\" + item.owner}>\r\n                <Card\r\n                  title={\r\n                    <div>\r\n                      <span style={{ fontSize: 18, marginRight: 8 }}>{item.name}</span>\r\n                    </div>\r\n                  }\r\n                >\r\n                  \r\n                  <a href={\"https://opensea.io/assets/\"+(readContracts && readContracts.TaiShangMapNFT && readContracts.TaiShangMapNFT.address)+\"/\"+item.id} target=\"_blank\">\r\n                    <div>\r\n                          <Nft\r\n                            nft={item}\r\n                            blockExplorer={blockExplorer}\r\n                            readContracts={readContracts}\r\n                            writeContracts={writeContracts}\r\n                            tx={tx}\r\n                          />\r\n                    </div>\r\n                  {/* <img src={item.image} /> */}\r\n                  {/* <iframe src={item.external_url} style={{width: \"200px\",height: \"200px\"}}></iframe> */}\r\n                  </a>\r\n                  <div>{item.description}</div>\r\n                </Card>\r\n\r\n                <div>\r\n                  owner:{\" \"}\r\n                  <Address\r\n                    address={item.owner}\r\n                    ensProvider={mainnetProvider}\r\n                    blockExplorer={blockExplorer}\r\n                    fontSize={16}\r\n                  />\r\n                  <AddressInput\r\n                    ensProvider={mainnetProvider}\r\n                    placeholder=\"transfer to address\"\r\n                    value={transferToAddresses[id]}\r\n                    onChange={newValue => {\r\n                      const update = {};\r\n                      update[id] = newValue;\r\n                      setTransferToAddresses({ ...transferToAddresses, ...update });\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    onClick={() => {\r\n                      console.log(\"writeContracts\", writeContracts);\r\n                      tx(writeContracts.TaiShangMapNFT.transferFrom(address, transferToAddresses[id], id));\r\n                    }}\r\n                  >\r\n                    Transfer\r\n                  </Button>\r\n                </div>\r\n              </List.Item>\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\n\r\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\r\nimport { Address, AddressInput } from \"../components\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\r\n  const listOfTokens = useTokenList(\r\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>👷</span>\r\n        Edit your <b>contract</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/contracts\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛰</span>\r\n        <b>compile/deploy</b> with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔭</span>\r\n        explore the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{\r\n            marginLeft: 4,\r\n            marginRight: 4,\r\n            /* backgroundColor: \"#f9f9f9\", */\r\n            padding: 4,\r\n            borderRadius: 4,\r\n            fontWeight: \"bolder\",\r\n          }}\r\n        >\r\n          🖇 hooks\r\n        </span>\r\n        and\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          📦 components\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        for example, the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          useBalance()\r\n        </span>{\" \"}\r\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\r\n      </div>\r\n\r\n      <div style={{ margin: 8 }}>\r\n        <div>\r\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\r\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            tokenlists.org!\r\n          </a>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          value={selectedToken}\r\n          onChange={value => {\r\n            console.log(`selected ${value}`);\r\n            setSelectedToken(value);\r\n          }}\r\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          optionFilterProp=\"children\"\r\n        >\r\n          {listOfTokens.map(token => (\r\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\r\n              {token.symbol}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        as you build your app you&apos;ll need web3 specific components like an\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {\"<AddressInput/>\"}\r\n        </span>\r\n        component:\r\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\r\n          <AddressInput ensProvider={mainnetProvider} />\r\n        </div>\r\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        this balance could be multiplied by\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          price\r\n        </span>{\" \"}\r\n        that is loaded with the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          usePrice\r\n        </span>{\" \"}\r\n        hook with the current value: <b>${price}</b>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💧</span>\r\n        use the <b>faucet</b> to send funds to\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <Address address={address} minimized /> {address}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        deploy to a testnet or mainnet by editing\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/hardhat.config.js\r\n        </span>\r\n        and running\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔑</span>\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run generate\r\n        </span>\r\n        will create a deployer account in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat\r\n        </span>\r\n        <div style={{ marginTop: 8 }}>\r\n          (use{\" \"}\r\n          <span\r\n            className=\"highlight\"\r\n            style={{\r\n              marginLeft: 4,\r\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\r\n              borderRadius: 4,\r\n              fontWeight: \"bolder\",\r\n            }}\r\n          >\r\n            yarn run account\r\n          </span>{\" \"}\r\n          to display deployer address and balance)\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⚙️</span>\r\n        build your app with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run build\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        ship it!\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run surge\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run s3\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run ipfs\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💬</span>\r\n        for support, join this\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\r\n            Telegram Chat\r\n          </a>\r\n        </span>\r\n      </div>\r\n      <div style={{ padding: 128 }}>\r\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { List } from \"antd\";\r\nimport { useContractReader } from \"eth-hooks\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Nft } from \"../components\";\r\n\r\nfunction Gallery({ readContracts, writeContracts, tx }) {\r\n  const totalSupply = useContractReader(readContracts, \"TaiShangMapNFT\", \"totalSupply\");\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const blockExplorer = \"https://moonbeam.moonscan.io/\";\r\n\r\n  const getNft = async (mintedNfts, i) => {\r\n    try {\r\n      let id = await readContracts.TaiShangMapNFT.tokenByIndex(i);\r\n      let owner = await readContracts.TaiShangMapNFT.ownerOf(id);\r\n      let uri = await readContracts.TaiShangMapNFT.tokenURI(id);\r\n      // console.log(uri)//, atob(uri));\r\n      let nft = JSON.parse(atob(uri.split(\",\")[1]));\r\n      nft.owner = owner;\r\n      nft.tokenId = id;\r\n      let tokenInfo = await readContracts.TaiShangMapNFT.tokenInfo(id);\r\n      nft.tokenInfo = tokenInfo;\r\n      // console.log(nft);\r\n      mintedNfts.push(nft);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  // TODO: add a cache to store the chain's nfts, no need to query every refresh\r\n  // TODO: show 3 nfts each row\r\n  const getAllMintedNfts = async () => {\r\n    setLoading(true);\r\n    let tot = totalSupply.toNumber();\r\n    var tasks = [];\r\n    var mintedNfts = [];\r\n    for (let i = 0; i < tot; i++) {\r\n      tasks.push(getNft(mintedNfts, i));\r\n    }\r\n    await Promise.all(tasks);\r\n    setNfts(mintedNfts);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!totalSupply || nfts.length > 0) return;\r\n    getAllMintedNfts();\r\n  }, [totalSupply]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        Nft Minted: {totalSupply?.toString()}\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={nfts}\r\n          loading={loading}\r\n          renderItem={item => (\r\n            <Nft\r\n              nft={item}\r\n              blockExplorer={blockExplorer}\r\n              readContracts={readContracts}\r\n              writeContracts={writeContracts}\r\n              tx={tx}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","import { Button, Col, Menu, Row, message } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport {\r\n  Account,\r\n  Contract,\r\n  Faucet,\r\n  GasGauge,\r\n  Header,\r\n  Ramp,\r\n  ThemeSwitch,\r\n  NetworkDisplay,\r\n  FaucetHint,\r\n  NetworkSwitch,\r\n} from \"./components\";\r\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\r\nimport { Home, Gallery, ExampleUI, Hints, Subgraph } from \"./views\";\r\nimport { useStaticJsonRPC } from \"./hooks\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\nconst axios = require('axios');\r\n\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/scaffold-eth/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\r\nconst USE_NETWORK_SELECTOR = false;\r\n\r\nconst web3Modal = Web3ModalSetup();\r\n\r\n// backend for voxel_handler\r\nconst serverUrl = \"https://bewater.leeduckgo.com/voxel_handler/api/v1/place_order\"; // elixir backend\r\n// const serverUrl = \"http://localhost:4000/voxel_handler/api/v1/place_order\"; // elixir backend\r\n// 🛰 providers\r\nconst providers = [\r\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n  \"https://rpc.scaffoldeth.io:48544\",\r\n];\r\n\r\nfunction App(props) {\r\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\r\n  // reference './constants.js' for other networks\r\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\r\n  const location = useLocation();\r\n\r\n  const targetNetwork = NETWORKS[selectedNetwork];\r\n\r\n  // 🔭 block explorer URL\r\n  const blockExplorer = targetNetwork.blockExplorer;\r\n\r\n  // load all your providers\r\n  const localProvider = useStaticJsonRPC([\r\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\r\n  ]);\r\n  const mainnetProvider = useStaticJsonRPC(providers);\r\n\r\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\r\n\r\n  // 🛰 providers\r\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  useOnBlock(mainnetProvider, () => {\r\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  });\r\n\r\n  // Then read your DAI balance like:\r\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\r\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\r\n  ]);\r\n\r\n  // keep track of a variable from the contract in the local React state:\r\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n  // keep track of a variable from the contract in the local React state:\r\n  const balance = useContractReader(readContracts, \"TaiShangMapNFT\", \"balanceOf\", [address]);\r\n  console.log(\"🤗 balance:\", balance);\r\n\r\n  // 📟 Listen for broadcast events\r\n  // const transferEvents = useEventListener(readContracts, \"TaiShangVoxel\", \"Transfer\", localProvider, 1);\r\n  // console.log(\"📟 Transfer events:\", transferEvents);\r\n  //\r\n  // 🧠 This effect will update yourCollectibles by polling when your balance changes\r\n  //\r\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\r\n  const [yourCollectibles, setYourCollectibles] = useState();\r\n\r\n  useEffect(() => {\r\n    const updateYourCollectibles = async () => {\r\n      const collectibleUpdate = [];\r\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\r\n        try {\r\n          console.log(\"GEtting token index\", tokenIndex);\r\n          const tokenId = await readContracts.TaiShangMapNFT.tokenOfOwnerByIndex(address, tokenIndex);\r\n          console.log(\"tokenId\", tokenId);\r\n          const tokenURI = await readContracts.TaiShangMapNFT.tokenURI(tokenId);\r\n          const jsonManifestString = atob(tokenURI.substring(29))\r\n          console.log(\"tokenURI\", tokenURI);\r\n          console.log(\"jsonManifestString\", jsonManifestString);\r\n/*\r\n          const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\r\n          console.log(\"ipfsHash\", ipfsHash);\r\n          const jsonManifestBuffer = await getFromIPFS(ipfsHash);\r\n        */\r\n          try {\r\n            const jsonManifest = JSON.parse(jsonManifestString);\r\n            console.log(\"jsonManifest\", jsonManifest);\r\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...jsonManifest });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      setYourCollectibles(collectibleUpdate.reverse());\r\n    };\r\n    updateYourCollectibles();\r\n  }, [address, yourBalance]);\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n    localChainId,\r\n    myMainnetDAIBalance,\r\n  ]);\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  const isSigner = injectedProvider && injectedProvider.getSigner && injectedProvider.getSigner()._isSigner\r\n\r\n  const [ loading, setLoading ] = useState()\r\n\r\n  const [ result, setResult ] = useState()\r\n\r\n  let display = \"\"\r\n  let [msgToSign, setMsgToSign] = useState()\r\n  const [extraData, setExtraData] = useState('leeduckgo; 0x01; +86 13323232323; Beijing, China')\r\n\r\n  const handleSignDataChange = (e) => {\r\n    setExtraData(e.target.value)\r\n  }\r\n  if(result){\r\n    let possibleTxId = result.substr(-66)\r\n    console.log(\"possibleTxId\",possibleTxId)\r\n    let extraLink = \"\"\r\n    if(possibleTxId.indexOf(\"0x\")==0){\r\n      extraLink = <a href={blockExplorer+\"tx/\"+possibleTxId} target=\"_blank\">view transaction on etherscan</a>\r\n    }else{\r\n      possibleTxId=\"\"\r\n    }\r\n    display = (\r\n      <div style={{marginTop:32}}>\r\n        {result.replace(possibleTxId,\"\")} {extraLink}\r\n      </div>\r\n    )\r\n\r\n  } else if(isSigner){\r\n    display = (\r\n      <div>\r\n        <div>\r\n        <p>Add your information(name, nft token ID of which you want to print to 3D Model, tel and addr):</p>\r\n        <textarea\r\n            type=\"text\"\r\n            value={extraData}\r\n            onChange={handleSignDataChange}\r\n            style={{ width: '25%', minHeight: '10px', marginTop: '5px' }}\r\n          ></textarea>\r\n        </div>\r\n      <Button loading={loading} style={{marginTop:32}} type=\"primary\" onClick={async ()=>{\r\n\r\n        setLoading(true)\r\n        try{\r\n          msgToSign = await axios.get(serverUrl)\r\n          setMsgToSign(msgToSign)\r\n          console.log(\"msgToSign\", msgToSign)\r\n          // TODO: change \"DongciDaciDongciDaciDongciDaciDongciDaciDongciDaci\" to an text area above the btn\r\n          let message = msgToSign.data + \";\" + extraData;\r\n          if(message && message.length > 32){//<--- traffic escape hatch?\r\n            let currentLoader = setTimeout(()=>{setLoading(false)},4000)\r\n            // let message = msgToSign.data.replace(\"**ADDRESS**\",address)\r\n\r\n            let sig = await injectedProvider.send(\"personal_sign\", [ message, address ]);\r\n            clearTimeout(currentLoader);\r\n            currentLoader = setTimeout(()=>{setLoading(false)},4000);\r\n            console.log(\"sig\",sig)\r\n            const res = await axios.post(serverUrl, {\r\n              address: address,\r\n              message: message,\r\n              signature: sig,\r\n              unique_id: msgToSign.data,\r\n            })\r\n            clearTimeout(currentLoader)\r\n            setLoading(false)\r\n            console.log(\"RESULT:\",res)\r\n            if(res.data){\r\n              setResult(res.data)\r\n            }\r\n          }else{\r\n            setLoading(false)\r\n            setResult(\"😅 Sorry, the server is overloaded. Please try again later. ⏳\")\r\n          }\r\n        }catch(e){\r\n          message.error(' Sorry, the server is overloaded. 🧯🚒🔥');\r\n          console.log(\"FAILED TO GET...\")\r\n          console.log(\"hhhh\"+e)\r\n        }\r\n\r\n\r\n\r\n      }}>\r\n        <span style={{marginRight:8}}>🔏</span>  sign order info and submit\r\n      </Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      <NetworkDisplay\r\n        NETWORKCHECK={NETWORKCHECK}\r\n        localChainId={localChainId}\r\n        selectedChainId={selectedChainId}\r\n        targetNetwork={targetNetwork}\r\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\r\n      />\r\n      <Menu style={{ textAlign: \"center\", marginTop: 40 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\r\n        <Menu.Item key=\"/\">\r\n          <Link to=\"/\">App Home</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/gallery\">\r\n          <Link to=\"/gallery\">Gallery</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/debug\">\r\n          <Link to=\"/debug\">Debug Contracts</Link>\r\n        </Menu.Item>\r\n        {/* <Menu.Item key=\"/hints\">\r\n          <Link to=\"/hints\">Hints</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/exampleui\">\r\n          <Link to=\"/exampleui\">ExampleUI</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/mainnetdai\">\r\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/subgraph\">\r\n          <Link to=\"/subgraph\">Subgraph</Link>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\r\n          <Home\r\n            isSigner={userSigner}\r\n            yourCollectibles={yourCollectibles}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            mainnetProvider={mainnetProvider}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            readContracts={readContracts}\r\n            />\r\n        </Route>\r\n        <Route exact path=\"/debug\">\r\n          {/*\r\n                🎛 this scaffolding is full of commonly used components\r\n                this <Contract/> component will automatically parse your ABI\r\n                and give you a form to interact with it locally\r\n            */}\r\n\r\n          <Contract\r\n            name=\"TaiShangMapNFT\"\r\n            price={price}\r\n            signer={userSigner}\r\n            provider={localProvider}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            contractConfig={contractConfig}\r\n          />\r\n        </Route>\r\n        <Route exact path=\"/gallery\">\r\n          <Gallery readContracts={readContracts} writeContracts={writeContracts} tx={tx} />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <div style={{ display: \"flex\", flex: 1, alignItems: \"center\" }}>\r\n          {USE_NETWORK_SELECTOR && (\r\n            <div style={{ marginRight: 20 }}>\r\n              <NetworkSwitch\r\n                networkOptions={networkOptions}\r\n                selectedNetwork={selectedNetwork}\r\n                setSelectedNetwork={setSelectedNetwork}\r\n              />\r\n            </div>\r\n          )}\r\n          <Account\r\n            useBurner={USE_BURNER_WALLET}\r\n            address={address}\r\n            localProvider={localProvider}\r\n            userSigner={userSigner}\r\n            mainnetProvider={mainnetProvider}\r\n            price={price}\r\n            web3Modal={web3Modal}\r\n            loadWeb3Modal={loadWeb3Modal}\r\n            logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n            blockExplorer={blockExplorer}\r\n          />\r\n        </div>\r\n        {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\r\n          <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\r\n        )}\r\n      </div>\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <BrowserRouter>\r\n        <App subgraphUri={subgraphUri} />\r\n      </BrowserRouter>\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","import { SmileOutlined, ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, List, Dropdown, Menu, notification } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Address from \"./Address\";\r\nconst Item = List.Item;\r\n\r\nfunction Nft({ nft, blockExplorer, readContracts, writeContracts, tx }) {\r\n  // const badgeNames = [\"noncegeeker\", \"learner\", \"workshoper\", \"partner\", \"buidler\", \"writer\", \"camper\", \"puzzler\"];\r\n  const [badgeNames, setBadgeNames] = useState([]);\r\n  const [edit, setEdit] = useState(false);\r\n  const [badges, setBadges] = useState({});\r\n  const [tokenInfo, setTokenInfo] = useState(\"\");\r\n  const [curNft, setCurNft] = useState(nft);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getBadgeNames = async () => {\r\n    let response = await fetch(\"https://api.github.com/gists/9c765cdeb324685d0d0c0099ba433a19\", {\r\n      method: \"GET\",\r\n    });\r\n    let data = await response.json();\r\n    setBadgeNames(eval(data?.files[\"badges.json\"].content));\r\n  };\r\n\r\n  const parseTokenInfo = tokenInfo_ => {\r\n    if (!tokenInfo_ || tokenInfo_ === \"\") {\r\n      setBadges({});\r\n      return;\r\n    }\r\n    var badges_ = {};\r\n    const tokenInfoArr = tokenInfo_.substr(1, tokenInfo_.length - 2).split(\", \");\r\n    for (let i = 0; i < tokenInfoArr.length; i++) {\r\n      var badgeName = tokenInfoArr[i].split(\" * \")[0];\r\n      if (badgeName[0] === '\"') badgeName = badgeName.substr(1, badgeName.length - 1);\r\n      if (badgeName[badgeName.length - 1] === '\"') badgeName = badgeName.substr(0, badgeName.length - 1);\r\n      var badgeCount = \"1\";\r\n      if (tokenInfoArr[i].split(\" * \").length === 2) {\r\n        badgeCount = tokenInfoArr[i].split(\" * \")[1];\r\n      }\r\n      badges_[badgeName] = badgeCount;\r\n    }\r\n    setBadges(badges_);\r\n  };\r\n\r\n  const formatTokenInfo = () => {\r\n    console.log(\"formatTokenInfo\", badges);\r\n    var tokenInfo_ = \"[\";\r\n    for (let badgeName in badges) {\r\n      if (badges[badgeName] === \"1\") {\r\n        tokenInfo_ += `\"${badgeName}\", `;\r\n      } else {\r\n        tokenInfo_ += `\"${badgeName} * ${badges[badgeName]}\", `;\r\n      }\r\n    }\r\n    if (tokenInfo_.length > 2) tokenInfo_ = tokenInfo_.substr(0, tokenInfo_.length - 2) + \"]\";\r\n    else tokenInfo_ = \"\";\r\n    setTokenInfo(tokenInfo_);\r\n  };\r\n\r\n  const handleBadges = () => {\r\n    console.log(\"handleBadges\", nft, badges, tokenInfo);\r\n    setEdit(true);\r\n  };\r\n\r\n  const cancelBadges = () => {\r\n    setEdit(false);\r\n    setTokenInfo(curNft.tokenInfo);\r\n    parseTokenInfo(curNft.tokenInfo);\r\n  };\r\n\r\n  const getNft = async () => {\r\n    if (!curNft) return;\r\n    let uri = await readContracts.Web3Dev.tokenURI(curNft.tokenId.toString());\r\n    let nft_ = JSON.parse(atob(uri.split(\",\")[1]));\r\n    console.log(\"getNft\", curNft, nft_);\r\n    let tokenInfo_ = await readContracts.Web3Dev.getTokenInfo(curNft.tokenId);\r\n    setCurNft({ ...curNft, image: nft_.image, tokenInfo: tokenInfo_ });\r\n  };\r\n\r\n  const notify = (message, description, icon) => {\r\n    notification.open({\r\n      message: message,\r\n      description: description,\r\n      icon: icon,\r\n    });\r\n  };\r\n\r\n  const confirmBadges = async () => {\r\n    if (tokenInfo === curNft.tokenInfo) {\r\n      setEdit(false);\r\n      return;\r\n    }\r\n    console.log(\"confirmBadges\", curNft);\r\n    setLoading(true);\r\n    try {\r\n      const result = tx(writeContracts.Web3Dev.setTokenInfo(curNft.tokenId, tokenInfo), update => {\r\n        setEdit(false);\r\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n          notify(\r\n            \"Success!\",\r\n            \"set badges of nft \" + curNft.tokenId.toString() + \" success\",\r\n            <SmileOutlined style={{ color: \"#108ee9\" }} />,\r\n          );\r\n        }\r\n      });\r\n      await result;\r\n    } catch (e) {\r\n      console.log(\"error: \", e);\r\n      notify(\r\n        \"Failed!\",\r\n        \"set badges of nft \" + curNft.tokenId.toString() + \" failed\",\r\n        <ExclamationCircleOutlined style={{ color: \"#ee1111\" }} />,\r\n      );\r\n    }\r\n    await getNft(); // refresh nft info\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!nft) return;\r\n    setCurNft(nft);\r\n  }, [nft]);\r\n\r\n  useEffect(() => {\r\n    if (!curNft) return;\r\n    getBadgeNames();\r\n    // console.log(\"useEffect curNft\", curNft);\r\n    setTokenInfo(curNft.tokenInfo);\r\n    parseTokenInfo(curNft.tokenInfo);\r\n  }, [curNft]);\r\n\r\n  const addBadgesMenu = (\r\n    <Menu>\r\n      {badgeNames.map((badgeName, i) => {\r\n        return (\r\n          <Menu.Item key={badgeName}>\r\n            <Button\r\n              type=\"link\"\r\n              onClick={() => {\r\n                setBadges(badges => {\r\n                  if (badgeName in badges) {\r\n                    let count = parseInt(badges[badgeName]);\r\n                    count++;\r\n                    badges[badgeName] = count.toString();\r\n                  } else {\r\n                    badges[badgeName] = \"1\";\r\n                  }\r\n                  return badges;\r\n                });\r\n                formatTokenInfo();\r\n              }}\r\n            >\r\n              {badgeName}\r\n            </Button>\r\n          </Menu.Item>\r\n        );\r\n      })}\r\n    </Menu>\r\n  );\r\n\r\n  const removeBadgesMenu = (\r\n    <Menu>\r\n      {Object.keys(badges).map((badgeName, i) => {\r\n        return (\r\n          <Menu.Item key={badgeName}>\r\n            <Button\r\n              type=\"link\"\r\n              onClick={() => {\r\n                setBadges(badges => {\r\n                  let count = parseInt(badges[badgeName]);\r\n                  count--;\r\n                  if (count === 0) {\r\n                    delete badges[badgeName];\r\n                  } else {\r\n                    badges[badgeName] = count.toString();\r\n                  }\r\n                  return badges;\r\n                });\r\n                formatTokenInfo();\r\n              }}\r\n            >\r\n              {badgeName}\r\n            </Button>\r\n          </Menu.Item>\r\n        );\r\n      })}\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Item>\r\n        <Item.Meta\r\n          title={\r\n            <div>\r\n              <a href={curNft.description}>{curNft.name + \" owner: \"}</a>\r\n              <Address value={curNft.owner} blockExplorer={blockExplorer} />\r\n            </div>\r\n          }\r\n          description={\r\n            loading ? \"loading\" : <img src={curNft.image} width=\"200\" height=\"200\" onClick={handleBadges} alt=\"\" />\r\n          }\r\n        />\r\n      </Item>\r\n      <Modal\r\n        title=\"Badges\"\r\n        visible={edit}\r\n        onCancel={cancelBadges}\r\n        onOk={confirmBadges}\r\n        destroyOnClose={true}\r\n        loading={loading}\r\n      >\r\n        <Dropdown overlay={addBadgesMenu}>\r\n          <Button type=\"primary\">Add</Button>\r\n        </Dropdown>\r\n        &nbsp;\r\n        <Dropdown overlay={removeBadgesMenu}>\r\n          <Button type=\"primary\">Remove</Button>\r\n        </Dropdown>\r\n        &nbsp; &nbsp; &nbsp;\r\n        <span>badges: {tokenInfo}</span>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nft;\r\n","const ERC721ABI = [\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"approved\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"Approval\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"operator\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": false,\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"approved\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"ApprovalForAll\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"from\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"to\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"Transfer\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"to\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"approve\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"balanceOf\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"baseURL\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"blockHeight\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_blockHeight\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_tokenInfo\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_mapType\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"claim\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getApproved\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"operator\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"isApprovedForAll\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"mapType\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"name\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"onlyGame\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"ownerOf\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"renounceOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"rule\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"from\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"to\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"safeTransferFrom\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"from\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"to\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"_data\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"safeTransferFrom\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"operator\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"approved\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setApprovalForAll\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_baseURL\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setbaseURL\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes4\",\r\n\t\t\t\t\"name\": \"interfaceId\",\r\n\t\t\t\t\"type\": \"bytes4\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"supportsInterface\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"symbol\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"index\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"tokenByIndex\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"tokenInfo\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"index\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"tokenOfOwnerByIndex\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"tokenURI\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"totalSupply\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"from\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"to\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferFrom\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      ERC721: {\r\n        address: \"0x0ACE27B4403E77Fd3FAC7B73Fc8eaB146C1ddcD3\",\r\n        abi: ERC721ABI,\r\n      },\r\n      // UNI: {\r\n      //   address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n      //   abi: ERC20ABI,\r\n      // },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}